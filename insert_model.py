
import os
import sys
import shutil
from datetime import datetime

# Add project root to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.ModelService import ModelService
from services.TrainInfoService import TrainInfoService
from config.config import Config


def create_model_directory():
    """T·∫°o th∆∞ m·ª•c models n·∫øu ch∆∞a c√≥"""
    model_dir = os.path.join(Config.BASE_DIR, 'uploads/models')
    if not os.path.exists(model_dir):
        os.makedirs(model_dir)
        print(f"‚úÖ Created models directory: {model_dir}")
    return model_dir


def copy_model_file(src_path, dest_dir, model_name, version):
    """Copy file .pt t·ª´ th∆∞ m·ª•c src sang th∆∞ m·ª•c models"""
    if not os.path.exists(src_path):
        raise FileNotFoundError(f"Model file not found: {src_path}")
    
    # T·∫°o t√™n file ƒë√≠ch
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"{model_name}_v{version}_{timestamp}.pt"
    dest_path = os.path.join(dest_dir, filename)
    
    # Copy file
    shutil.copy2(src_path, dest_path)
    print(f"‚úÖ Copied model file: {src_path} -> {dest_path}")
    
    # Return relative path cho database
    return os.path.join('models', filename)


def create_sample_models():
    """T·∫°o c√°c model m·∫´u v·ªõi d·ªØ li·ªáu gi·∫£"""
    
    model_service = ModelService()
    
    # Danh s√°ch c√°c model m·∫´u
    sample_models = [
        {
            'name': 'YOLOv8_Fraud_Detection',
            'version': '1.0',
            'description': 'Model ph√°t hi·ªán gian l·∫≠n s·ª≠ d·ª•ng YOLOv8 - phi√™n b·∫£n ƒë·∫ßu ti√™n',
            'pt_file': 'model.pt',  # T√™n file trong th∆∞ m·ª•c src
            'trainInfo': {
                'epoch': 100,
                'learningRate': 0.001,
                'batchSize': 16,
                'mae': 0.125,
                'mse': 0.089,
                'accuracy': 0.945,
                'timeTrain': '2h 30m 15s'
            }
        },
        {
            'name': 'YOLOv8_Fraud_Detection',
            'version': '1.1',
            'description': 'Model ph√°t hi·ªán gian l·∫≠n - c·∫£i thi·ªán accuracy',
            'pt_file': 'model.pt',  # C√πng file nh∆∞ng version kh√°c
            'trainInfo': {
                'epoch': 150,
                'learningRate': 0.0008,
                'batchSize': 32,
                'mae': 0.098,
                'mse': 0.067,
                'accuracy': 0.967,
                'timeTrain': '3h 45m 22s'
            }
        }
    ]
    
    # T·∫°o th∆∞ m·ª•c models
    model_dir = create_model_directory()
    
    # Insert t·ª´ng model
    created_models = []
    
    for model_data in sample_models:
        try:
            print(f"\nüîÑ Creating model: {model_data['name']} v{model_data['version']}")
            
            # ƒê∆∞·ªùng d·∫´n file .pt trong th∆∞ m·ª•c src
            src_file_path = os.path.join(Config.BASE_DIR, model_data['pt_file'])
            
            # Copy file model
            model_url = copy_model_file(
                src_file_path, 
                model_dir, 
                model_data['name'], 
                model_data['version']
            )
            
            # T·∫°o data ƒë·ªÉ insert
            insert_data = {
                'name': model_data['name'],
                'version': model_data['version'],
                'description': model_data['description'],
                'modelUrl': model_url,
                'trainInfo': model_data['trainInfo']
            }
            
            # Insert v√†o database
            created_model = model_service.create(insert_data)
            
            print(f"‚úÖ Successfully created model:")
            print(f"   - ID: {created_model.id}")
            print(f"   - Name: {created_model.name}")
            print(f"   - Version: {created_model.version}")
            print(f"   - Accuracy: {created_model.trainInfo.accuracy if created_model.trainInfo else 'N/A'}")
            print(f"   - Model URL: {created_model.modelUrl}")
            
            created_models.append(created_model)
            
        except Exception as e:
            print(f"‚ùå Failed to create model {model_data['name']} v{model_data['version']}: {str(e)}")
            continue
    
    return created_models


def display_summary(models):
    """Hi·ªÉn th·ªã t√≥m t·∫Øt c√°c model ƒë√£ t·∫°o"""
    print(f"\n{'='*60}")
    print(f"üìä SUMMARY - Created {len(models)} models")
    print(f"{'='*60}")
    
    for i, model in enumerate(models, 1):
        accuracy = model.trainInfo.accuracy if model.trainInfo else 0
        print(f"{i}. {model.name} v{model.version}")
        print(f"   ‚îî‚îÄ‚îÄ ID: {model.id} | Accuracy: {accuracy:.1%} | URL: {model.modelUrl}")
    
    print(f"\nüéâ All models have been successfully inserted into the database!")


def main():
    """Main function"""
    print("üöÄ Starting model insertion process...")
    print(f"üìÅ Base directory: {Config.BASE_DIR}")
    
    try:
        # Ki·ªÉm tra file .pt c√≥ t·ªìn t·∫°i kh√¥ng
        src_file = os.path.join(Config.BASE_DIR, 'model.pt')
        if not os.path.exists(src_file):
            print(f"‚ùå Model file not found: {src_file}")
            print("üìù Please make sure 'model.pt' exists in the 'src' directory")
            return
        
        print(f"‚úÖ Found model file: {src_file}")
        
        # T·∫°o c√°c model m·∫´u
        created_models = create_sample_models()
        
        if created_models:
            display_summary(created_models)
        else:
            print("‚ùå No models were created successfully")
    
    except Exception as e:
        print(f"üí• Error occurred: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()